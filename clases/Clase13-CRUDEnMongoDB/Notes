Comandos de apoyo

En nuestro cliente CLI contamos con comandos que, si bien no forman parte de la clasificación del CRUD, son útiles para poder gestionar correctamente nuestra base de datos.
show dbs : Muestra las bases de datos existentes.
use <db name>: Crea una nueva base de datos (en caso de no existir) y se posiciona sobre ella 
db: Muestra en qué base de datos estamos posicionado.
show collections: Muestra todas las colecciones disponibles en la base de datos posicionada.
db.createCollection(name): Crea una colección en la base de datos posicionada.
db.dropDatabase(): Elimina la base de datos actual.
db.collection.drop(): Elimina la colección de la base de datos posicionada.

Primeros comandos CRUD: CR

db.collection.insertOne(doc) : Agrega un nuevo documento a la colección seleccionada.
db.collection.insertMany(docs): Agrega múltiples documentos a la colección seleccionada (dado un arreglo de documentos).
db.collection.findOne(opt): Busca un elemento que cumpla con los criterios de búsqueda (opt), devuelve el primer documento que cumpla con dicho criterio.
db.collection.find(opt):Devuelve todos los documentos que cumplan con dicho criterio. 
db.collection.find(opt).pretty(): Añadido para hacer más presentables los resultados de un find().

Conteo de datos

Los comandos de conteo para determinar el número de documentos en una colección son: 
db.collection.estimatedDocumentCount() Cuenta el estimado más próximo  al número de documentos según su metadata.
db.collection.countDocuments(opt) Cuenta los documentos que cumplan con el criterio definido en las opciones (opt).

opt (options): agregando opciones
En muchas consultas encontramos el elemento (opt), esto hace referencia a las opciones de filtros de búsqueda que podemos realizar al momento de buscar un valor, la sintaxis elemental de un opt es:
{propiedad:valor}
comando: db.users.find({gender:"M"})

Búsquedas más complejas: filtros
Las búsquedas del mundo real no siempre requieren que un valor sea igual a otro. En ocasiones necesitamos que sea menor, mayor, diferente de, entre otras cosas. 
Los filtros pueden agregarse dentro de los elementos de criterio (opt) con ayuda del símbolo $, además, podemos agregar más de un filtro para asegurarnos que el documento se ajuste a criterios muy específicos.
Entonces, la sintaxis general será:

db.coll.find( {key: {$operator: val}} )  
MongoDB: Operadores para Filtros de Query
$and : Realiza operación AND -> sintaxis: {$and: [ {},{} ] }
$or : Realiza operación OR -> sintaxis: {$or: [ {},{} ] }
$lt : Coincide con valores que son menores que un valor especificado.
$lte : Coincide con valores menores o iguales a un valor especificado.
$gt : Coincide con valores mayores a un valor especificado.
$gte : Coincide con valores mayores o iguales a un valor especificado.
$ne : Coincide con valores que no son iguales a un valor especificado.
$eq : Selecciona los documentos que son iguales a un valor especificado.
$exists : Selecciona los documentos según la existencia de un campo.
$in : Selecciona los documentos especificados en un array. 
sintaxis: {key:{$in: [array of values] } }
$nin : Coincide con ninguno de los valores especificados en un array.
$size : Coincide con el número de elementos especificados.
$all : Coincide con todos los valores definidos dentro de un array.
$elemMatch : Coincide con algún valor definido dentro del query.

MongoDB: Búsqueda Avanzada
db.coll.distinct( val )
devuelve un array con los distintos valores que toma un determinado campo en los documentos de la colección.
db.coll.find({doc.subdoc:value})
Se utiliza para filtrar subdocumentos.
db.coll.find({name: /^Max$/i})
filtra utilizando expresiones regulares

Proyecciones, Sorts, Skips y Limits

Proyecciones: find(query, projection)
En ocasiones no necesitamos toda la información de un documento. Si tenemos un documento con 100 propiedades, podemos definir sólo las propiedades que queremos obtener. 
Una proyección se incluye al momento de hacer una búsqueda, (siempre como segundo argumento) y es el equivalente a decirle a la base de datos: “sólo necesito ésto”
Así, podríamos decir db.users.find({},{name:1}); Lo cual indica que, el campo “name” es el único que necesitamos obtener por parte del documento, ahorrándonos espacio y complejidad en el resultado.

Sort
Sirve para poder hacer un ordenamiento de la información. El ordenamiento se define con 1 o -1 para hacer el ordenamiento ascendente o descendente respectivamente. 
La sintaxis es: db.collection.find().sort({val_A:1,val_B:-1})
La razón por la cual podemos agregar múltiples valores de ordenamiento, es en caso de que dos documentos tengan el mismo valor, podamos ordenarlos bajo otro criterio

Skip y limit
Skip: Omite el número de documentos indicados: Podemos usarlo cuando hagamos paginaciones, cuando necesitemos ignorar un valor que sabemos que es innecesario, etc.
Su sintaxis es: .skip(offset)
Limit: Limita el número de documentos devueltos. De manera que podamos hacer diferentes niveles de paginación (Tu página puede devolver 5 elementos por página, o bien 100, tú decides). 
Su sintaxis es: .limit(num) 

CRUD - UD: Update y Delete

CRUD : U (Update)
Las operaciones Update se pueden realizar de dos maneras: Actualizar un documento, o actualizar múltiples documentos. 
db.collection.updateOne(query,update,option)
query: sirve para filtrar qué elementos actualizar (usa los filtros iguales al find)
update: Apartado para indicar qué actualizar de los documentos que cumplen con el filtro. Update tiene sus propios operadores como $set, $unset, $inc, $rename, $mul, $min, $max
option: Opciones a tomar en cuenta para la actualización (como upsert, que inserta el valor en caso de que el documento a actualizar ni siquiera exista).
db.collection.updateMany(query,update,options) Actualiza múltiples documentos que cumplan con el criterio. 

Lista de operadores para Update
Notamos cómo, antes de definir qué operación realizar, colocamos un filtro para saber qué documentos son de mi interés para actualización.
CRUD : D (Delete)
Nuestra última operación es para eliminar datos, si bien hay muchas variantes de una eliminación, sólo veremos las dos principales.
db.collection.deleteOne({key:val}) : Elimina sólo el primer elemento que cumpla con el criterio, se usa principalmente para encontrar identificadores específicos. Se recomienda no utilizar si somos conscientes de que el valor a buscar no es repetido.
db.collection.deleteMany({key:val}) :  Elimina todos los documentos que cumplan con el criterio, se usa cuando sabemos que más de un valor va a contar con ese valor y necesitamos hacer una limpieza general.


[{nombre: "Andrea"}, {last_name:"Pennisi"}, {curso:"BE"}, {edad:41}{email:"andrea@pennisi.com"}, {raza:"Humana"}, {nombre: "Romina"}, {last_name:"Pereyra"}, 
{curso:"Javascript"}, 
{edad:30}{email:"romina@pereyra.com"}, {raza:"Humana"}, {nombre: "Juanita"}, {last_name:"Juana"}, {curso:"SQL"}, {edad:25}{email:"juanita@juana.com"}, {raza:""},
{nombre: "cosme"}, {last_name:"fulanito"}, {curso:"React"}, {edad:20}{email:"cosme@fulatnito.com"}, {raza:"Humana"},
{nombre: "Homero"}, {last_name:"Simpson"}, {curso:"Ingenieria"}, {edad:52}{email:"homero@simpson.com"}, {raza:"Humana"}]
