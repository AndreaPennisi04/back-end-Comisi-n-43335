// import { fileURLToPath } from "url";
// import { dirname } from "path";
// import bcrypt from "bcrypt";

// /**
//  * HashSync toma el password que  pasemos y procedera a aplicar un procvesop de hasheo a partit de un "Salt".
//  * genSltsync generara un salt de 1o caracters. Un salt es un string random que hace que el proceso de hasheo se realice de manera impredecible.
//  * devuelve un string con el password haseheado. El proceso es irreversible.
//  */

// export const createHash = (password) => bcrypt.hashSync(password, bcrypt.genSaltSync(10));

// /**
//  * compareSync tomara primero el password sin hashear y lo comparara con el password ya hasheado en la base de datos. Devolvera true or false dependiendo si el password coincide o no.
//  */

// /* Tenemos dos metodos nuevos
// createHash: tiene el metodo de password y tiene un bcrypt.hashSync, dode el hashSync genera un codigo bloqueante realizando un encriptacion de forma sincronizada, donde le enviamos el password en limpio donde luego genSaltSync(10) decide que tan robusto es (seria como validar que tenga $Aa123 algo asi). Y tambien define que tan largo o la longitud del hasheo de cauntos caracteres van a ser. Aca se devuelve iun string
// isValidPassword: aca se valida si la password mas coloque la paswword nuevamente para comparar sea la misma. Recibimos un objeto de usuario. si caundo se comparan la no coiinciden, va  a devolver un false. Aca se devuelve un booleano
//  */

// export const isValidPassword = (user, password) => bcrypt.compareSync(password, user.password);

// const __filename = fileURLToPath(import.meta.url);
// const __dirname = dirname(__filename);

// export default __dirname;
